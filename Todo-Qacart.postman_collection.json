{
	"info": {
		"_postman_id": "c8ac1bc4-eeb4-4ab0-9be6-5be954458664",
		"name": "Todo-Qacart",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31580166",
		"_collection_link": "https://interstellar-firefly-294066.postman.co/workspace/Todo-Qacart~50cdbfae-cfe9-4c0c-98d7-89680ae7934f/collection/31580166-c8ac1bc4-eeb4-4ab0-9be6-5be954458664?action=share&source=collection_link&creator=31580166"
	},
	"item": [
		{
			"name": "Registration",
			"item": [
				{
					"name": "1-Happy case",
					"item": [
						{
							"name": "register with valid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"pm.test(\"check firstName\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(pm.globals.get(\"userFirstName\"));\r",
											"});\r",
											"// Define the expected schema\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"access_token\": { \"type\": \"string\" },\r",
											"        \"userID\": { \"type\": \"string\" },\r",
											"        \"firstName\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"access_token\", \"userID\", \"firstName\"]\r",
											"};\r",
											"\r",
											"pm.test(\"check Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"check Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"email\",\r",
											"            `${Math.random().toString(36).substring(7)}@example.com`);\r",
											"\r",
											"pm.globals.set(\"userFirstName\", `${Math.random().toString(36).substring(7)}`); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"firstName\": \"{{userFirstName}}\",\r\n    \"lastName\": \"khalel\",\r\n    \"password\": \"123456789\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/register",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"register"
									]
								}
							},
							"response": []
						}
					],
					"description": "1-create random email and radom userfirstName"
				},
				{
					"name": "2-Email validation",
					"item": [
						{
							"name": "register with Duplicated email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed SyntaxError by adding closing parentheses properly\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.expect(pm.response).to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"check Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"body has error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Email is already exists in the Database\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"email\": \"{{email}}\",\r\n \"firstName\": \"{{userFirstName}} \",\r\n \"lastName\": \"khalel\",\r\n \"password\": \"123456789\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/register",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "register with invalid email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400); // Check if the status code is 400\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.not.have.status(\"OK\"); // Check if the status code name is not \"OK\"\r",
											"});\r",
											"pm.test(\"Body has error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\\\"email\\\" must be a valid email\"); // Check if the error message is as expected\r",
											"});\r",
											"\r",
											"pm.test(\"Body is correct\", function () {\r",
											"    pm.expect(pm.response.json().message).to.include(\"\\\"email\\\" must be a valid email\"); // Check if the body message is as expected\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"email\": \"Ekhlaskhalel.com\",\r\n \"firstName\": \"Ekhlas \",\r\n \"lastName\": \"Khalel\",\r\n \"password\": \"123456789\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/register",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "register with Empty email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"body has error message \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\\\"email\\\" is not allowed to be empty\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"email\": \"\",\r\n \"firstName\": \"Ekhlas \",\r\n \"lastName\": \"Khalel\",\r\n \"password\": \"123456789\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/register",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"register"
									]
								}
							},
							"response": []
						}
					],
					"description": "1- registered with the same email used in happy case\n\n2- registered with invalid email formate\n\n3-registered with empty email"
				},
				{
					"name": "3-Password validation",
					"item": [
						{
							"name": "Register with invalid password (less than the limit)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"body has error message \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\\\"password\\\" length must be at least 8 characters long\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"email\": \"{{$randomEmail}}\",\r\n \"firstName\": \"Ekhlas \",\r\n \"lastName\": \"Khalel\",\r\n \"password\": \"1234\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/register",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "register with empty password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"body has error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\\\"password\\\" is not allowed to be empty\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"firstName\": \"Ekhlas \",\r\n    \"lastName\": \"Khalel\",\r\n    \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/register",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with invalid password (value)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400  \", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"body must has error message \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\\\"password\\\" is not allowed to be more than limit\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"firstName\": \"Ekhlas\",\r\n    \"lastName\": \"Khalel\",\r\n    \"password\": \"111111111111111111111111111111&12233577582554154745545854222222222222222222222222221*****ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd{{}}[][][[2002/**5114cc\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/register",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"register"
									]
								}
							},
							"response": []
						}
					],
					"description": "1-Register with invalid password (less than the limit)\n\n2-register with empty password\n\n3-Register with invalid password (value)"
				},
				{
					"name": "4-Name validation",
					"item": [
						{
							"name": "Register with empty firstName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"body has error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\\\"firstName\\\" is not allowed to be empty\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"khalel\",\r\n    \"password\": \"123456789\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/register",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with invalid firstName -special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"body has error message \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\\\"firstName\\\" is not allowed to have special chracter\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"firstName\": \"A## \",\r\n    \"lastName\": \"Khalel\",\r\n    \"password\": \"123456789\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/register",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with invalid firstName -numbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"body has error message \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\\\"firstName\\\" is not allowed to be numbers\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"email\": \"{{$randomEmail}}\",\r\n \"firstName\": \"123112\" ,\r\n \"lastName\": \"khalel\",\r\n \"password\": \"123456789\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/register",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with invalid firstName -length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"body has error message \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\\\"firstName\\\" length must be at least 2 characters long\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"email\": \"{{$randomEmail}}\",\r\n \"firstName\": \"m\",\r\n \"lastName\": \"khalel\",\r\n \"password\": \"123456789\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/register",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with invalid firstName -space",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"body has error message \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\\\"firstName\\\" must not have spaces \");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"firstName\": \"@#  # \",\r\n    \"lastName\": \"khalel\",\r\n    \"password\": \"123456789\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/register",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with invalid lasttName -special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"body has error message \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\\\"lastName\\\" is not allowed to have special chracter\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"firstName\": \"Ekhlas\",\r\n    \"lastName\": \"s@#\",\r\n    \"password\": \"123456789\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/register",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with invalid lastName -numbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"body has error message \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\\\"lasttName\\\" is not allowed to be numbers\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"email\": \"{{$randomEmail}}\",\r\n \"firstName\": \"Ekhlas\",\r\n \"lastName\": \"123422\",\r\n \"password\": \"123456789\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/register",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with empty lastName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"body has error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\\\"lastName\\\" is not allowed to be empty\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"email\": \"{{$randomEmail}}\",\r\n \"firstName\": \"Ekhlas\",\r\n \"lastName\": \"\",\r\n \"password\": \"123456789\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/register",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with invalid lastName -space",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"body has error message \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\\\"firstName\\\" must not have spaces \");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"firstName\": \"Ekhlas\",\r\n    \"lastName\": \"k   halel\",\r\n    \"password\": \"123456789\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/register",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with invalid lastName -length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"body has error message \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\\\"lastName\\\" length must be at least 2 characters long\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"firstName\": \"Ekhlas\",\r\n    \"lastName\": \"k\",\r\n    \"password\": \"123456789\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/register",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"register"
									]
								}
							},
							"response": []
						}
					],
					"description": "1-Register with empty firstName\n\n2-Register with invalid firstName -special character\n\n3-Register with invalid firstName -numbers\n\n4-Register with invalid firstName -length\n\n5-Register with invalid firstName -space\n\n@ Last Name\n\n1-Register with empty lastName\n\n2-Register with invalid lastName -special character\n\n3-Register with invalid lastName -numbers\n\n4-Register with invalid lastName -length\n\n5-Register with invalid lastName -space"
				}
			],
			"description": "1- register with valid data"
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "1-Happy case",
					"item": [
						{
							"name": "login with valid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"// Define the expected schema\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"access_token\": { \"type\": \"string\" },\r",
											"        \"userID\": { \"type\": \"string\" },\r",
											"        \"firstName\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"access_token\", \"userID\", \"firstName\"]\r",
											"};\r",
											"\r",
											"// Get the response body as JSON\r",
											"var response = pm.response.json();\r",
											"\r",
											"// Validate the response body against the schema\r",
											"pm.test('Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"ekhlaskhalel20@gmail.com\",\r\n    \"password\": \"123456789\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/login",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"description": "login with valid data"
				},
				{
					"name": "2-Email validation",
					"item": [
						{
							"name": "login with empty email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"body has error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Please Fill a correct Password\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"123456789\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/login",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login with invalid email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"body has error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Please Fill a correct Password\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9,ar;q=0.8,de;q=0.7"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "_ga=GA1.1.312583400.1702844105; __stripe_mid=bb8efa62-191f-43af-9967-261521b0646c0100b0; _ga_WE5H245LPL=GS1.1.1730976766.24.0.1730976766.0.0.0"
									},
									{
										"key": "Origin",
										"value": "https://todo.qacart.com"
									},
									{
										"key": "Referer",
										"value": "https://todo.qacart.com/login"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"130\", \"Google Chrome\";v=\"130\", \"Not?A_Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"ekhlaskhalelgmail.com\",\r\n    \"password\": \"123456789\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/login",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"login"
									]
								},
								"description": "Generated from cURL: curl 'https://todo.qacart.com/api/v1/users/login' \\\r\n  -H 'Accept: application/json, text/plain, */*' \\\r\n  -H 'Accept-Language: en-US,en;q=0.9,ar;q=0.8,de;q=0.7' \\\r\n  -H 'Connection: keep-alive' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Cookie: _ga=GA1.1.312583400.1702844105; __stripe_mid=bb8efa62-191f-43af-9967-261521b0646c0100b0; _ga_WE5H245LPL=GS1.1.1730976766.24.0.1730976766.0.0.0' \\\r\n  -H 'Origin: https://todo.qacart.com' \\\r\n  -H 'Referer: https://todo.qacart.com/login' \\\r\n  -H 'Sec-Fetch-Dest: empty' \\\r\n  -H 'Sec-Fetch-Mode: cors' \\\r\n  -H 'Sec-Fetch-Site: same-origin' \\\r\n  -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36' \\\r\n  -H 'sec-ch-ua: \"Chromium\";v=\"130\", \"Google Chrome\";v=\"130\", \"Not?A_Brand\";v=\"99\"' \\\r\n  -H 'sec-ch-ua-mobile: ?0' \\\r\n  -H 'sec-ch-ua-platform: \"Windows\"' \\\r\n  --data-raw '{\"email\":\"ekhlaskhalel2@gmail.com\",\"password\":\"010242043333334\"}'"
							},
							"response": []
						},
						{
							"name": "login with wrong email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body has error message \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"We could not find the email in the database\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"khalelmahmod20@gmail.com\",\r\n    \"password\": \"123456789\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/login",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"description": "1-login with empty email\n\n2-login with invalid email\n\n3-login with wrong email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"response_body_string\");\r",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "3-Password validation",
					"item": [
						{
							"name": "login with empty password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"body has error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Please Fill a correct Password\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"ekhlaskhalel20@gmail.com\",\r\n    \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/login",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login with wrong password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"pm.test(\"body has error messege\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"The email and password combination is not correct, please fill a correct email and password\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"ekhlaskhalel20@gmail.com\",\r\n    \"password\": \"012teasy\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/login",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login with invalid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"pm.test(\"body has error messege\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"The email and password combination is not correct, please fill a correct email and password\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"ekhlaskhalel20@gmail.com\",\r\n    \"password\": \"wetghsdnjmkf,glbddddddddddddddddddddddghjjkftygjhmhgkvtgykmhbgjgbjmyhjjmddddddddddddddd\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base-url}}/api/v1/users/login",
									"host": [
										"{{Base-url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"description": "1-login with empty password\n\n2-login with wrong password\n\n3-login with invalid password"
				}
			]
		}
	]
}